{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport API from '../api';\nimport Swal from 'sweetalert2';\nimport StarRating from 'vue-star-rating';\nexport default {\n  components: {\n    StarRating\n  },\n  data() {\n    return {\n      post: {},\n      postComments: [],\n      // comentarios específicos del post\n      newComment: {\n        author: '',\n        content: '',\n        rating: 0\n      }\n    };\n  },\n  async created() {\n    const response = await API.getPostByID(this.$route.params.id);\n    this.post = response;\n\n    // Obtener los comentarios específicos del post actual\n    this.fetchPostComments();\n  },\n  methods: {\n    async removePost(id) {\n      const response = await API.delatePost(id);\n      this.$router.push({\n        name: 'home'\n      });\n      Swal.fire('', response.message, 'success');\n    },\n    async fetchPostComments() {\n      // Obtener los comentarios específicos del post actual\n      const response = await API.getCommentsByPostID(this.$route.params.id);\n      this.postComments = response;\n    },\n    addComment() {\n      // Agregar validación adicional si es necesario\n      const newComment = {\n        id: this.postComments.length + 1,\n        author: this.newComment.author,\n        content: this.newComment.content,\n        rating: this.newComment.rating\n      };\n\n      // Guardar el nuevo comentario en la base de datos asociado al post actual\n      API.addCommentToPost(this.$route.params.id, newComment).then(() => {\n        // Actualizar la lista de comentarios del post\n        this.fetchPostComments();\n\n        // Limpiar el formulario después de agregar el comentario\n        this.newComment.author = '';\n        this.newComment.content = '';\n        this.newComment.rating = 0;\n      }).catch(error => {\n        // Manejar el error si ocurre\n        console.error(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["API","Swal","StarRating","components","data","post","postComments","newComment","author","content","rating","created","response","getPostByID","$route","params","id","fetchPostComments","methods","removePost","delatePost","$router","push","name","fire","message","getCommentsByPostID","addComment","length","addCommentToPost","then","catch","error","console"],"sources":["src/views/Login.vue"],"sourcesContent":["<template>\r\n  <main class=\"text-light\" >\r\n    <div class=\"container\">\r\n      <section class=\"py-5 text-center container\">\r\n        <div class=\"row py-lg-5\">\r\n          <div class=\"col-lg-6 col-md-8 mx-auto\">\r\n            <h1 class=\"fw-light\">Discord Login</h1>\r\n            <p class=\"lead text-muted\">\r\n              Conecta tu cuenta con nosotros para poder tener mas actualizaciones en el futuro!!!\r\n            </p>\r\n            <p>\r\n              <div>\r\n                <a @click=\"loginWithDiscord\">Logeate con Discord</a>\r\n              </div>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  </main>\r\n</template>\r\n  \r\n<script>\r\nimport API from '../api';\r\nimport Swal from 'sweetalert2';\r\nimport StarRating from 'vue-star-rating';\r\n\r\nexport default {\r\n  components: {\r\n    StarRating,\r\n  },\r\n  data() {\r\n    return {\r\n      post: {},\r\n      postComments: [], // comentarios específicos del post\r\n      newComment: {\r\n        author: '',\r\n        content: '',\r\n        rating: 0\r\n      }\r\n    };\r\n  },\r\n  async created() {\r\n    const response = await API.getPostByID(this.$route.params.id);\r\n    this.post = response;\r\n\r\n    // Obtener los comentarios específicos del post actual\r\n    this.fetchPostComments();\r\n  },\r\n  methods: {\r\n    async removePost(id) {\r\n      const response = await API.delatePost(id);\r\n      this.$router.push({ name: 'home' });\r\n      Swal.fire('', response.message, 'success');\r\n    },\r\n    async fetchPostComments() {\r\n      // Obtener los comentarios específicos del post actual\r\n      const response = await API.getCommentsByPostID(this.$route.params.id);\r\n      this.postComments = response;\r\n    },\r\n    addComment() {\r\n      // Agregar validación adicional si es necesario\r\n      const newComment = {\r\n        id: this.postComments.length + 1,\r\n        author: this.newComment.author,\r\n        content: this.newComment.content,\r\n        rating: this.newComment.rating\r\n      };\r\n\r\n      // Guardar el nuevo comentario en la base de datos asociado al post actual\r\n      API.addCommentToPost(this.$route.params.id, newComment)\r\n        .then(() => {\r\n          // Actualizar la lista de comentarios del post\r\n          this.fetchPostComments();\r\n\r\n          // Limpiar el formulario después de agregar el comentario\r\n          this.newComment.author = '';\r\n          this.newComment.content = '';\r\n          this.newComment.rating = 0;\r\n        })\r\n        .catch(error => {\r\n          // Manejar el error si ocurre\r\n          console.error(error);\r\n        });\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":";AAuBA,OAAAA,GAAA;AACA,OAAAC,IAAA;AACA,OAAAC,UAAA;AAEA;EACAC,UAAA;IACAD;EACA;EACAE,KAAA;IACA;MACAC,IAAA;MACAC,YAAA;MAAA;MACAC,UAAA;QACAC,MAAA;QACAC,OAAA;QACAC,MAAA;MACA;IACA;EACA;EACA,MAAAC,QAAA;IACA,MAAAC,QAAA,SAAAZ,GAAA,CAAAa,WAAA,MAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;IACA,KAAAX,IAAA,GAAAO,QAAA;;IAEA;IACA,KAAAK,iBAAA;EACA;EACAC,OAAA;IACA,MAAAC,WAAAH,EAAA;MACA,MAAAJ,QAAA,SAAAZ,GAAA,CAAAoB,UAAA,CAAAJ,EAAA;MACA,KAAAK,OAAA,CAAAC,IAAA;QAAAC,IAAA;MAAA;MACAtB,IAAA,CAAAuB,IAAA,KAAAZ,QAAA,CAAAa,OAAA;IACA;IACA,MAAAR,kBAAA;MACA;MACA,MAAAL,QAAA,SAAAZ,GAAA,CAAA0B,mBAAA,MAAAZ,MAAA,CAAAC,MAAA,CAAAC,EAAA;MACA,KAAAV,YAAA,GAAAM,QAAA;IACA;IACAe,WAAA;MACA;MACA,MAAApB,UAAA;QACAS,EAAA,OAAAV,YAAA,CAAAsB,MAAA;QACApB,MAAA,OAAAD,UAAA,CAAAC,MAAA;QACAC,OAAA,OAAAF,UAAA,CAAAE,OAAA;QACAC,MAAA,OAAAH,UAAA,CAAAG;MACA;;MAEA;MACAV,GAAA,CAAA6B,gBAAA,MAAAf,MAAA,CAAAC,MAAA,CAAAC,EAAA,EAAAT,UAAA,EACAuB,IAAA;QACA;QACA,KAAAb,iBAAA;;QAEA;QACA,KAAAV,UAAA,CAAAC,MAAA;QACA,KAAAD,UAAA,CAAAE,OAAA;QACA,KAAAF,UAAA,CAAAG,MAAA;MACA,GACAqB,KAAA,CAAAC,KAAA;QACA;QACAC,OAAA,CAAAD,KAAA,CAAAA,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}